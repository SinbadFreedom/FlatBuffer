#define _CRT_SECURE_NO_WARNINGS 1
#define _CRTDBG_MAP_ALLOC
#include <stdlib.h>
#include <crtdbg.h>
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bench.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "bench.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
// @@protoc_insertion_point(includes)

namespace benchpb {

void protobuf_ShutdownFile_bench_2eproto() {
  delete Foo::default_instance_;
  delete Bar::default_instance_;
  delete FooBar::default_instance_;
  delete FooBarContainer::default_instance_;
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
void protobuf_AddDesc_bench_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#else
void protobuf_AddDesc_bench_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#endif
  Foo::default_instance_ = new Foo();
  Bar::default_instance_ = new Bar();
  FooBar::default_instance_ = new FooBar();
  FooBarContainer::default_instance_ = new FooBarContainer();
  Foo::default_instance_->InitAsDefaultInstance();
  Bar::default_instance_->InitAsDefaultInstance();
  FooBar::default_instance_->InitAsDefaultInstance();
  FooBarContainer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_bench_2eproto);
}

#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_bench_2eproto_once_);
void protobuf_AddDesc_bench_2eproto() {
  ::google::protobuf::::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_bench_2eproto_once_,
                 &protobuf_AddDesc_bench_2eproto_impl);
}
#else
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_bench_2eproto {
  StaticDescriptorInitializer_bench_2eproto() {
    protobuf_AddDesc_bench_2eproto();
  }
} static_descriptor_initializer_bench_2eproto_;
#endif
bool Enum_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Foo::kIdFieldNumber;
const int Foo::kCountFieldNumber;
const int Foo::kPrefixFieldNumber;
const int Foo::kLengthFieldNumber;
#endif  // !_MSC_VER

Foo::Foo()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Foo::InitAsDefaultInstance() {
}

Foo::Foo(const Foo& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Foo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_ULONGLONG(0);
  count_ = 0;
  prefix_ = 0;
  length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Foo::~Foo() {
  SharedDtor();
}

void Foo::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void Foo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Foo& Foo::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_bench_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_bench_2eproto();
#endif
  return *default_instance_;
}

Foo* Foo::default_instance_ = NULL;

Foo* Foo::New() const {
  return new Foo;
}

void Foo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_ULONGLONG(0);
    count_ = 0;
    prefix_ = 0;
    length_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Foo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_prefix;
        break;
      }

      // required int32 prefix = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prefix:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prefix_)));
          set_has_prefix();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_length;
        break;
      }

      // required uint32 length = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Foo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->id(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // required int32 prefix = 3;
  if (has_prefix()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->prefix(), output);
  }

  // required uint32 length = 4;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->length(), output);
  }

}

int Foo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // required int32 prefix = 3;
    if (has_prefix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prefix());
    }

    // required uint32 length = 4;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->length());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Foo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Foo*>(&from));
}

void Foo::MergeFrom(const Foo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_prefix()) {
      set_prefix(from.prefix());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
}

void Foo::CopyFrom(const Foo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Foo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Foo::Swap(Foo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(prefix_, other->prefix_);
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Foo::GetTypeName() const {
  return "benchpb.Foo";
}


// ===================================================================

#ifndef _MSC_VER
const int Bar::kParentFieldNumber;
const int Bar::kTimeFieldNumber;
const int Bar::kRatioFieldNumber;
const int Bar::kSizeFieldNumber;
#endif  // !_MSC_VER

Bar::Bar()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void Bar::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  parent_ = const_cast< ::benchpb::Foo*>(
      ::benchpb::Foo::internal_default_instance());
#else
  parent_ = const_cast< ::benchpb::Foo*>(&::benchpb::Foo::default_instance());
#endif
}

Bar::Bar(const Bar& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void Bar::SharedCtor() {
  _cached_size_ = 0;
  parent_ = NULL;
  time_ = 0;
  ratio_ = 0;
  size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Bar::~Bar() {
  SharedDtor();
}

void Bar::SharedDtor() {
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete parent_;
  }
}

void Bar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Bar& Bar::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_bench_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_bench_2eproto();
#endif
  return *default_instance_;
}

Bar* Bar::default_instance_ = NULL;

Bar* Bar::New() const {
  return new Bar;
}

void Bar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_parent()) {
      if (parent_ != NULL) parent_->::benchpb::Foo::Clear();
    }
    time_ = 0;
    ratio_ = 0;
    size_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool Bar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .benchpb.Foo parent = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_parent()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required int32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_ratio;
        break;
      }

      // required float ratio = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ratio_)));
          set_has_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_size;
        break;
      }

      // required uint32 size = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Bar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .benchpb.Foo parent = 1;
  if (has_parent()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->parent(), output);
  }

  // required int32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }

  // required float ratio = 3;
  if (has_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->ratio(), output);
  }

  // required uint32 size = 4;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->size(), output);
  }

}

int Bar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .benchpb.Foo parent = 1;
    if (has_parent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->parent());
    }

    // required int32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // required float ratio = 3;
    if (has_ratio()) {
      total_size += 1 + 4;
    }

    // required uint32 size = 4;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bar::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Bar*>(&from));
}

void Bar::MergeFrom(const Bar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_parent()) {
      mutable_parent()->::benchpb::Foo::MergeFrom(from.parent());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_ratio()) {
      set_ratio(from.ratio());
    }
    if (from.has_size()) {
      set_size(from.size());
    }
  }
}

void Bar::CopyFrom(const Bar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bar::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_parent()) {
    if (!this->parent().IsInitialized()) return false;
  }
  return true;
}

void Bar::Swap(Bar* other) {
  if (other != this) {
    std::swap(parent_, other->parent_);
    std::swap(time_, other->time_);
    std::swap(ratio_, other->ratio_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string Bar::GetTypeName() const {
  return "benchpb.Bar";
}


// ===================================================================

#ifndef _MSC_VER
const int FooBar::kSiblingFieldNumber;
const int FooBar::kNameFieldNumber;
const int FooBar::kRatingFieldNumber;
const int FooBar::kPostfixFieldNumber;
#endif  // !_MSC_VER

FooBar::FooBar()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FooBar::InitAsDefaultInstance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  sibling_ = const_cast< ::benchpb::Bar*>(
      ::benchpb::Bar::internal_default_instance());
#else
  sibling_ = const_cast< ::benchpb::Bar*>(&::benchpb::Bar::default_instance());
#endif
}

FooBar::FooBar(const FooBar& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FooBar::SharedCtor() {
  _cached_size_ = 0;
  sibling_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rating_ = 0;
  postfix_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FooBar::~FooBar() {
  SharedDtor();
}

void FooBar::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
    delete sibling_;
  }
}

void FooBar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FooBar& FooBar::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_bench_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_bench_2eproto();
#endif
  return *default_instance_;
}

FooBar* FooBar::default_instance_ = NULL;

FooBar* FooBar::New() const {
  return new FooBar;
}

void FooBar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sibling()) {
      if (sibling_ != NULL) sibling_->::benchpb::Bar::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    rating_ = 0;
    postfix_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FooBar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .benchpb.Bar sibling = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sibling()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_rating;
        break;
      }

      // optional double rating = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_rating:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rating_)));
          set_has_rating();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_postfix;
        break;
      }

      // optional uint32 postfix = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_postfix:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &postfix_)));
          set_has_postfix();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FooBar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .benchpb.Bar sibling = 1;
  if (has_sibling()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->sibling(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional double rating = 3;
  if (has_rating()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->rating(), output);
  }

  // optional uint32 postfix = 4;
  if (has_postfix()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->postfix(), output);
  }

}

int FooBar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .benchpb.Bar sibling = 1;
    if (has_sibling()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sibling());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional double rating = 3;
    if (has_rating()) {
      total_size += 1 + 8;
    }

    // optional uint32 postfix = 4;
    if (has_postfix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->postfix());
    }

  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FooBar::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FooBar*>(&from));
}

void FooBar::MergeFrom(const FooBar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sibling()) {
      mutable_sibling()->::benchpb::Bar::MergeFrom(from.sibling());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_rating()) {
      set_rating(from.rating());
    }
    if (from.has_postfix()) {
      set_postfix(from.postfix());
    }
  }
}

void FooBar::CopyFrom(const FooBar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FooBar::IsInitialized() const {

  if (has_sibling()) {
    if (!this->sibling().IsInitialized()) return false;
  }
  return true;
}

void FooBar::Swap(FooBar* other) {
  if (other != this) {
    std::swap(sibling_, other->sibling_);
    std::swap(name_, other->name_);
    std::swap(rating_, other->rating_);
    std::swap(postfix_, other->postfix_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FooBar::GetTypeName() const {
  return "benchpb.FooBar";
}


// ===================================================================

#ifndef _MSC_VER
const int FooBarContainer::kListFieldNumber;
const int FooBarContainer::kInitializedFieldNumber;
const int FooBarContainer::kFruitFieldNumber;
const int FooBarContainer::kLocationFieldNumber;
#endif  // !_MSC_VER

FooBarContainer::FooBarContainer()
  : ::google::protobuf::MessageLite() {
  SharedCtor();
}

void FooBarContainer::InitAsDefaultInstance() {
}

FooBarContainer::FooBarContainer(const FooBarContainer& from)
  : ::google::protobuf::MessageLite() {
  SharedCtor();
  MergeFrom(from);
}

void FooBarContainer::SharedCtor() {
  _cached_size_ = 0;
  initialized_ = false;
  fruit_ = 0;
  location_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FooBarContainer::~FooBarContainer() {
  SharedDtor();
}

void FooBarContainer::SharedDtor() {
  if (location_ != &::google::protobuf::internal::kEmptyString) {
    delete location_;
  }
  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  if (this != &default_instance()) {
  #else
  if (this != default_instance_) {
  #endif
  }
}

void FooBarContainer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FooBarContainer& FooBarContainer::default_instance() {
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  protobuf_AddDesc_bench_2eproto();
#else
  if (default_instance_ == NULL) protobuf_AddDesc_bench_2eproto();
#endif
  return *default_instance_;
}

FooBarContainer* FooBarContainer::default_instance_ = NULL;

FooBarContainer* FooBarContainer::New() const {
  return new FooBarContainer;
}

void FooBarContainer::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    initialized_ = false;
    fruit_ = 0;
    if (has_location()) {
      if (location_ != &::google::protobuf::internal::kEmptyString) {
        location_->clear();
      }
    }
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

bool FooBarContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .benchpb.FooBar list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectTag(16)) goto parse_initialized;
        break;
      }

      // optional bool initialized = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_initialized:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &initialized_)));
          set_has_initialized();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fruit;
        break;
      }

      // optional .benchpb.Enum fruit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fruit:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::benchpb::Enum_IsValid(value)) {
            set_fruit(static_cast< ::benchpb::Enum >(value));
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_location;
        break;
      }

      // optional string location = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_location:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FooBarContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .benchpb.FooBar list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->list(i), output);
  }

  // optional bool initialized = 2;
  if (has_initialized()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->initialized(), output);
  }

  // optional .benchpb.Enum fruit = 3;
  if (has_fruit()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->fruit(), output);
  }

  // optional string location = 4;
  if (has_location()) {
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->location(), output);
  }

}

int FooBarContainer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional bool initialized = 2;
    if (has_initialized()) {
      total_size += 1 + 1;
    }

    // optional .benchpb.Enum fruit = 3;
    if (has_fruit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fruit());
    }

    // optional string location = 4;
    if (has_location()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->location());
    }

  }
  // repeated .benchpb.FooBar list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FooBarContainer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FooBarContainer*>(&from));
}

void FooBarContainer::MergeFrom(const FooBarContainer& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_initialized()) {
      set_initialized(from.initialized());
    }
    if (from.has_fruit()) {
      set_fruit(from.fruit());
    }
    if (from.has_location()) {
      set_location(from.location());
    }
  }
}

void FooBarContainer::CopyFrom(const FooBarContainer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FooBarContainer::IsInitialized() const {

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void FooBarContainer::Swap(FooBarContainer* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(initialized_, other->initialized_);
    std::swap(fruit_, other->fruit_);
    std::swap(location_, other->location_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::std::string FooBarContainer::GetTypeName() const {
  return "benchpb.FooBarContainer";
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace benchpb

// @@protoc_insertion_point(global_scope)
